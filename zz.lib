//@version=5
//lib-version: 7
// @description Zigzag related user defined types and methods
library("Zigzag", overlay = true)

import Trendoscope/arrays/1

// @type Indicator is collection of indicator values applied on high, low and close
// @field indicatorHigh Indicator Value applied on High
// @field indicatorLow Indicator Value applied on Low
export type Indicator
	float indicatorHigh
	float indicatorLow

// @type PivotCandle represents data of the candle which forms either pivot High or pivot low or both
// @field _high High price of candle forming the pivot
// @field _low Low price of candle forming the pivot
// @field length Pivot length
// @field pHighBar represents number of bar back the pivot High occurred.
// @field pLowBar represents number of bar back the pivot Low occurred.
// @field pHigh Pivot High Price
// @field pLow Pivot Low Price
// @field indicators Array of Indicators - allows to add multiple
export type PivotCandle
	float _high = high
	float _low = low
	int length = 5
	int pHighBar
	int pLowBar
	float pHigh
	float pLow
	array<Indicator> indicators

// @type Pivot refers to zigzag pivot. Each pivot can contain various data
// @field point pivot point coordinates
// @field dir direction of the pivot. Valid values are 1, -1, 2, -2
// @field level is used for multi level zigzags. For single level, it will always be 0
// @field componentIndex is the lower level zigzag array index for given pivot. Used only in multi level Zigzag Pivots
// @field subComponents is the number of sub waves per each zigzag wave. Only applicable for multi level zigzags
// @field microComponents is the number of base zigzag components in a zigzag wave
// @field ratio Price Ratio based on previous two pivots
// @field sizeRatio Ratio of size beteen current zigzag wave and the last zigzag wave in the same direction.
// @field barRatio Bar Ratio based on previous two pivots
// @field indicatorNames Names of the indicators applied on zigzag
// @field indicatorValues Values of the indicators applied on zigzag
// @field indicatorRatios Ratios of the indicators applied on zigzag based on previous 2 pivots
export type Pivot
	chart.point point
	int dir
	int level = 0
    int componentIndex = 0
    int subComponents = 0
    int microComponents = 1
    float ratio = 1.0
    float sizeRatio = 1.0
    float barRatio = 1.0
    array<Pivot> subPivots
	array<string> indicatorNames
	array<float> indicatorValues
    array<float> indicatorRatios

// @type Flags required for drawing zigzag. Only used internally in zigzag calculation. Should not set the values explicitly
// @field newPivot true if the calculation resulted in new pivot
// @field doublePivot true if the calculation resulted in two pivots on same bar
// @field updateLastPivot true if new pivot calculated replaces the old one.
export type ZigzagFlags
    bool newPivot = false
    bool doublePivot = false
    bool updateLastPivot = false

// @type Zigzag object which contains whole zigzag calculation parameters and pivots
// @field length Zigzag length. Default value is 5
// @field numberOfPivots max number of pivots to hold in the calculation. Default value is 20
// @field offset Bar offset to be considered for calculation of zigzag. Default is 0 - which means calculation is done based on the latest bar.
// @field level Zigzag calculation level - used in multi level recursive zigzags
// @field zigzagPivots array<Pivot> which holds the last n pivots calculated.
// @field flags  ZigzagFlags object which is required for continuous drawing of zigzag lines.
export type Zigzag
    int length = 5
    int numberOfPivots = 20
    int offset = 0
    int level = 0
    array<Pivot> zigzagPivots
    ZigzagFlags flags

// @type Zigzag Drawing Object
// @field zigzagLine Line joining two pivots
// @field zigzagLabel Label which can be used for drawing the values, ratios, directions etc.
export type ZigzagObject
	line zigzagLine
	label zigzagLabel

// @type Object which holds properties of zigzag drawing. To be used along with ZigzagDrawing
// @field lineColor Zigzag line color. Default is color.blue
// @field lineWidth Zigzag line width. Default is 1
// @field lineStyle Zigzag line style. Default is line.style_solid.
// @field showLabel If set, the drawing will show labels on each pivot. Default is false
// @field textColor Text color of the labels. Only applicable if showLabel is set to true.
// @field maxObjects Max number of zigzag lines to display. Default is 300
// @field xloc Time/Bar reference to be used for zigzag drawing. Default is Time - xloc.bar_time.
// @field curved Boolean field to print curved zigzag - used only with polyline implementation
export type ZigzagProperties
    color lineColor = color.blue
    int lineWidth = 1
    string lineStyle = line.style_solid
    bool showLabel = false
    color textColor = color.black
    int maxObjects = 300
    string xloc = xloc.bar_time
    bool curved = false

// @type Object which holds complete zigzag drawing objects and properties.
// @field zigzag Zigzag object which holds the calculations.
// @field properties ZigzagProperties object which is used for setting the display styles of zigzag
// @field drawings array<ZigzagObject> which contains lines and labels of zigzag drawing.
export type ZigzagDrawing
    Zigzag zigzag
    ZigzagProperties properties
    array<ZigzagObject> drawings

// @type Object which holds complete zigzag drawing objects and properties - polyline version
// @field zigzag Zigzag object which holds the calculations.
// @field properties ZigzagProperties object which is used for setting the display styles of zigzag
// @field zigzaglabels array<label> that contains the zigzag labels
// @field zigzagLine polyline object of zigzag lines
export type ZigzagDrawingPL
    Zigzag zigzag
    ZigzagProperties properties
    array<label> zigzagLabels
    polyline zigzagLine

//*************************************************************************************************************************************************************//
//*************************************************************** TYPE Indicator  *****************************************************************************//
//*************************************************************************************************************************************************************//
method init(array<Indicator> indicators, matrix<float> indicatorValues)=>
	for i=0 to na(indicatorValues) ? na : indicatorValues.rows()==0? na : indicatorValues.rows()-1
		iRow = indicatorValues.row(i)
		Indicator indicator = Indicator.new(iRow.first(), iRow.last())
		indicators.push(indicator)
    indicators

//*************************************************************************************************************************************************************//
//*************************************************************** TYPE PivotCandle  ***************************************************************************//
//*************************************************************************************************************************************************************//

method init(PivotCandle candle, matrix<float> indicators=na)=>
	candle.pHighBar := ta.highestbars(candle._high, candle.length)
	candle.pLowBar := ta.lowestbars(candle._low, candle.length)
	candle.pHigh := ta.highest(candle._high, candle.length)
	candle.pLow := ta.lowest(candle._low, candle.length)
    candle.indicators := array.new<Indicator>()
    candle.indicators.init(indicators)
    candle
//*************************************************************************************************************************************************************//
//*************************************************************** TYPE Pivot  *********************************************************************************//
//*************************************************************************************************************************************************************//

method unshift(array<Pivot> arr, Pivot val, int maxItems)=>
    arr.unshift(val)
    if(arr.size() > maxItems)
        arr.pop()

method update(Pivot this, PivotCandle candle, array<string> indicatorNames)=>
    dir = math.sign(this.dir)
	array<float> _indicators = array.new<float>()
	for indicator in candle.indicators
		indicatorValue = dir > 0? indicator.indicatorHigh : indicator.indicatorLow
		_indicators.push(indicatorValue)
	this.indicatorNames := indicatorNames
	this.indicatorValues := _indicators
    this.indicatorRatios := array.new<float>()
    this

method tostring(chart.point this)=>str.tostring(this.price)
method get(Pivot this, string key)=>
    key == "point"? this.point.tostring() :
         key == "dir"? str.tostring(this.dir) :
         key == "level"? str.tostring(this.level) :
         key == "componentIndex"? str.tostring(this.componentIndex) :
         key == "subComponents"? str.tostring(this.subComponents) :
         key == "microComponents"? str.tostring(this.microComponents) :
         key == "ratio"? str.tostring(this.ratio) :
         key == "sizeRatio"? str.tostring(this.sizeRatio) :
         key == "barRatio"? str.tostring(this.barRatio) :
         key == "indicatorNames" ? na(this.indicatorNames)? "[]" : str.tostring(this.indicatorNames) :
         key == "indicatorValues" ? na(this.indicatorValues)? "[]" : str.tostring(this.indicatorValues) :
         key == "indicatorRatios" ? na(this.indicatorRatios)? "[]" : str.tostring(this.indicatorRatios) :
         na

// @function Converts ZigzagTypes/Pivot object to string representation
// @param this ZigzagTypes/Pivot
// @param sortKeys If set to true, string output is sorted by keys.
// @param sortOrder Applicable only if sortKeys is set to true. Positive number will sort them in ascending order whreas negative numer will sort them in descending order. Passing 0 will not sort the keys
// @param includeKeys Array of string containing selective keys. Optional parmaeter. If not provided, all the keys are considered
// @returns string representation of ZigzagTypes/Pivot
export method tostring(Pivot this, bool sortKeys = false, int sortOrder = 1, array<string> includeKeys=na)=>
	str = ''
    if(not na(this))
        keys = na(includeKeys)? array.from("point", "dir", "level", "componentIndex", "subComponents", "microComponents", "ratio", "sizeRatio", "barRatio", "indicatorNames", "indicatorValues", "indicatorRatios") : includeKeys
        keyValues = array.new<string>()
        if(sortKeys and not na(sortOrder) and sortOrder!=0)
            keys.sort(sortOrder>0? order.ascending : order.descending)

        for key in keys
            keyValues.push('"'+key+'":'+'"'+this.get(key)+'"')
        str := '{'+array.join(keyValues, ",")+'}'
    str

// @function Converts Array of Pivot objects to string representation
// @param this Pivot object array
// @param sortKeys If set to true, string output is sorted by keys.
// @param sortOrder Applicable only if sortKeys is set to true. Positive number will sort them in ascending order whreas negative numer will sort them in descending order. Passing 0 will not sort the keys
// @param includeKeys Array of string containing selective keys. Optional parmaeter. If not provided, all the keys are considered
// @returns string representation of Pivot object array
export method tostring(array<Pivot> this, bool sortKeys= false, int sortOrder = 1, array<string> includeKeys=na)=>
    array<string> combinedStr = array.new<string>()
    if(not na(this))
        for pivot in this
            combinedStr.push(pivot.tostring(sortKeys, sortOrder, includeKeys))
    '['+array.join(combinedStr, ",")+']'

//*************************************************************************************************************************************************************//
//*************************************************************** TYPE ZigzagFlags  ***************************************************************************//
//*************************************************************************************************************************************************************//

// @function Converts ZigzagFlags object to string representation
// @param this ZigzagFlags object
// @returns string representation of ZigzagFlags
export method tostring(ZigzagFlags this)=> str.tostring(array.from(this.newPivot, this.doublePivot, this.updateLastPivot))

//*************************************************************************************************************************************************************//
//*************************************************************** TYPE Zigzag  ********************************************************************************//
//*************************************************************************************************************************************************************//

method init(Zigzag this)=>
    if(na(this.zigzagPivots))
        this.zigzagPivots := array.new<Pivot>()
        this.flags := ZigzagFlags.new()
    this

method addnewpivot(Zigzag this, Pivot pivot, array<Pivot> components = na)=>
    dir = math.sign(pivot.dir)
    if(this.zigzagPivots.size() >=1)
        lastPivot = this.zigzagPivots.get(0)
        lastValue = lastPivot.point.price
        pivot.subComponents := lastPivot.componentIndex - pivot.componentIndex
        if not na(components) ? components.size() > lastPivot.componentIndex : false
            pivot.subPivots := components.slice(pivot.componentIndex, lastPivot.componentIndex+1)
            microComponents = 0
            for [index, subPivot] in pivot.subPivots
                if(index!=pivot.subPivots.size()-1)
                    microComponents += subPivot.microComponents
            pivot.microComponents := microComponents

        if(math.sign(lastPivot.dir) == math.sign(dir))
            runtime.error('Direction mismatch')
        if(this.zigzagPivots.size() >=2)
            llastPivot = this.zigzagPivots.get(1)
            value = pivot.point.price
            llastValue = llastPivot.point.price
            newDir =  dir * value > dir * llastValue ? dir * 2 : dir
            pivot.dir := int(newDir)
            pivot.ratio := math.round(math.abs(lastValue-value)/math.abs(llastValue - lastValue), 3)
            pivot.barRatio := math.round(math.abs(lastPivot.point.index-pivot.point.index)/math.abs(llastPivot.point.index - lastPivot.point.index), 3)

            if(this.zigzagPivots.size() >=3)
                lllastPivot = this.zigzagPivots.get(2)
                lllastValue = lllastPivot.point.price
                pivot.sizeRatio := math.round(math.abs(lastValue-value)/math.abs(lllastValue - llastValue), 3)

            llastIndicators = llastPivot.indicatorValues
            indicators = pivot.indicatorValues
            lastIndicators = lastPivot.indicatorValues
            pivot.indicatorRatios.clear()
            for [index, indicatorValue] in indicators
                lastIndicatorValue = lastIndicators.get(index)
                llastIndicatorValue = llastIndicators.get(index)
                indicatorRatio = math.round(math.abs(lastIndicatorValue-indicatorValue)/math.abs(llastIndicatorValue - lastIndicatorValue), 3)
                pivot.indicatorRatios.push(indicatorRatio)
    this.zigzagPivots.unshift(pivot, this.numberOfPivots)
    this

method addnewpivot(Zigzag this, Pivot pivot, PivotCandle candle, array<string> indicatorNames, array<Pivot> components = na)=>
    pivot.update(candle, indicatorNames)
    this.addnewpivot(pivot, components)

method get(Zigzag this, string key)=>
    key == "length"? str.tostring(this.length) :
         key == "numberOfPivots"? str.tostring(this.numberOfPivots) :
         key == "offset"? str.tostring(this.offset) :
         key == "level"? str.tostring(this.level) :
         key == "zigzagPivots" ? na(this.zigzagPivots)? "[]" : this.zigzagPivots.tostring() :
         key == "flags" ? na(this.flags)? "[]" : this.flags.tostring() :
         na

// @function Gets the array of prices from array of Pivots
// @param pivots array<Pivot> array of Pivot objects
// @returns array<float> array of pivot prices
export method getPrices(array<Pivot> pivots)=>
    array<float> values = array.new<float>()
    for pivot in pivots
        values.push(pivot.point.price)
    values

// @function Gets the array of bars from array of Pivots
// @param pivots array<Pivot> array of Pivot objects
// @returns array<int> array of pivot bar indices
export method getBars(array<Pivot> pivots)=>
    array<int> bars = array.new<int>()
    for pivot in pivots
        bars.push(pivot.point.index)
    bars

// @function Gets the array of chart.point from array of Pivots
// @param pivots array<Pivot> array of Pivot objects
// @returns array<chart.point> array of pivot points
export method getPoints(array<Pivot> pivots)=>
    array<chart.point> points = array.new<chart.point>()
    for pivot in pivots
        points.push(pivot.point)
    points

// @function Gets the array of chart.point from Zigzag Object
// @param this Zigzag object
// @returns array<chart.point> array of pivot points
export method getPoints(Zigzag this)=>this.zigzagPivots.getPoints()

// @function Converts ZigzagTypes/Zigzag object to string representation
// @param this ZigzagTypes/Zigzagobject
// @param sortKeys If set to true, string output is sorted by keys.
// @param sortOrder Applicable only if sortKeys is set to true. Positive number will sort them in ascending order whreas negative numer will sort them in descending order. Passing 0 will not sort the keys
// @param includeKeys Array of string containing selective keys. Optional parmaeter. If not provided, all the keys are considered
// @returns string representation of ZigzagTypes/Zigzag
export method tostring(Zigzag this, bool sortKeys = false, int sortOrder = 1, array<string> includeKeys=na)=>
	keys = na(includeKeys)? array.from("length", "numberOfPivots", "offset", "level", "zigzagPivots", "flags") : includeKeys
    keyValues = array.new<string>()
	if(sortKeys and not na(sortOrder) and sortOrder!=0)
		keys.sort(sortOrder>0? order.ascending : order.descending)

	for key in keys
		keyValues.push('"'+key+'":'+'"'+this.get(key)+'"')
	'{'+array.join(keyValues, ",")+'}'

// @function Calculate zigzag based on input values and indicator values
// @param this Zigzag object
// @param ohlc Array containing OHLC values. Can also have custom values for which zigzag to be calculated
// @param indicators Array of indicator values
// @param indicatorNames Array of indicator names for which values are present. Size of indicators array should be equal to that of indicatorNames
// @param ltfHighTime Used for multi timeframe zigzags when called within request.security. Default value is current timeframe open time.
// @param ltfLowTime Used for multi timeframe zigzags when called within request.security. Default value is current timeframe open time.
// @returns current Zigzag object
export method calculate(Zigzag this, array<float> ohlc, matrix<float> indicators, array<string> indicatorNames,int ltfHighTime = time, int ltfLowTime = time) =>
    _ohlc = na(ohlc[this.offset])? ohlc : ohlc[this.offset]
    _indicators = na(indicators[this.offset])? indicators : indicators[this.offset]
    this.init()
    PivotCandle candle = PivotCandle.new(_ohlc.max(), _ohlc.min(), this.length)
    candle.init(_indicators)
    pDir = 1
    Pivot lastPivot = na
    this.flags.updateLastPivot := false
    this.flags.newPivot := false
    this.flags.doublePivot := false
    newBar = bar_index-this.offset
    newbartime = time[this.offset]
    distanceFromLastPivot = 0
    var counter = 0
    var lastCounterBar = 0
    forceDoublePivot = false

    if(this.zigzagPivots.size() > 0)
        lastPivot := this.zigzagPivots.get( 0)
        pDir := int(math.sign(lastPivot.dir))
        distanceFromLastPivot := newBar - lastPivot.point.index

    if(this.zigzagPivots.size() > 1)
        llastPivot = this.zigzagPivots.get(1)
        llastDir = int(math.sign(llastPivot.dir))
        forceDoublePivot := pDir == 1 and candle.pLowBar == 0 ? candle.pLow < llastPivot.point.price : pDir == -1 and candle.pHighBar == 0 ? candle.pHigh > llastPivot.point.price : false

    overflow = distanceFromLastPivot >= this.length

    if ((pDir == 1 and candle.pHighBar == 0) or (pDir == -1 and candle.pLowBar == 0)) and this.zigzagPivots.size()>=1
        value = pDir == 1 ? candle.pHigh : candle.pLow
        ipivot = pDir == 1? candle.pLow : candle.pHigh
        inewbartime = pDir == 1? ltfHighTime[this.offset] : ltfLowTime[this.offset]
        removeOld = value * lastPivot.dir >= lastPivot.point.price * lastPivot.dir
        if(removeOld)
            this.flags.updateLastPivot := true
            this.flags.newPivot := true
            this.zigzagPivots.shift()
            newPivotObject = Pivot.new(chart.point.from_index(newBar, value), pDir)
            newPivotObject.point.time := inewbartime
            this.addnewpivot(newPivotObject, candle, indicatorNames)

    if (pDir == 1 and candle.pLowBar == 0) or (pDir == -1 and candle.pHighBar == 0) and (not this.flags.newPivot or forceDoublePivot)
        value = pDir == 1 ? candle.pLow : candle.pHigh
        inewbartime = pDir == 1? ltfLowTime[this.offset] : ltfHighTime[this.offset]
        newPivotObject = Pivot.new(chart.point.from_index(newBar, value), -pDir)
        newPivotObject.point.time := inewbartime
        this.addnewpivot(newPivotObject, candle, indicatorNames)
        this.flags.doublePivot := this.flags.newPivot
        this.flags.newPivot := true

    if(overflow and not this.flags.newPivot)
        ipivot = pDir == 1? candle.pLow : candle.pHigh
        ipivotbar = pDir == 1? newBar+candle.pLowBar : newBar+candle.pHighBar
        ipivottime = pDir == 1? ltfLowTime[newBar-ipivotbar+this.offset] : ltfHighTime[newBar-ipivotbar+this.offset]
        iCandle = candle[newBar-ipivotbar]
        newPivotObject = Pivot.new(chart.point.from_index(ipivotbar, ipivot), -pDir)
        newPivotObject.point.time := ipivottime
        this.addnewpivot(newPivotObject, iCandle, indicatorNames)
        this.flags.newPivot := true
    this

// @function Calculate zigzag based on properties embedded within Zigzag object
// @param this Zigzag object
// @returns current Zigzag object
export method calculate(Zigzag this)=>
    this.calculate(array.from(high,low), matrix.new<float>(), array.new<string>())


// @function Calculate Next Level Zigzag based on the current calculated zigzag object
// @param this Zigzag object
// @returns Next Level Zigzag object
export method nextlevel(Zigzag this)=>
    nextLevel = Zigzag.new(this.length, this.numberOfPivots, 0)
    nextLevel.level := this.level +1
    nextLevel.init()
    if(this.zigzagPivots.size() > 0)
        Pivot tempBullishPivot = na
        Pivot tempBearishPivot = na
        for i=(this.zigzagPivots.size()-1) to 0
            lPivot = Pivot.copy(this.zigzagPivots.get(i))
            dir = lPivot.dir
            newDir = math.sign(dir)
            value = lPivot.point.price
            lPivot.level := lPivot.level+1
            lPivot.componentIndex := i
            if(nextLevel.zigzagPivots.size() > 0)
                lastPivot = nextLevel.zigzagPivots.get(0)
                lastDir = math.sign(lastPivot.dir)
                lastValue = lastPivot.point.price
                if(math.abs(dir) == 2)
                    if(lastDir == newDir)
                        if(dir*lastValue < dir*value)
                            nextLevel.zigzagPivots.shift()
                        else
                            tempPivot = newDir >0 ? tempBearishPivot : tempBullishPivot
                            if(not na(tempPivot))
                                nextLevel.addnewpivot(tempPivot, components = this.zigzagPivots)
                            else
                                continue
                    else
                        tempFirstPivot = newDir >0 ? tempBullishPivot : tempBearishPivot
                        tempSecondPivot = newDir >0 ? tempBearishPivot : tempBullishPivot
                        if(not na(tempFirstPivot) and not na(tempSecondPivot))
                            tempVal = tempFirstPivot.point.price
                            val = lPivot.point.price
                            if(newDir*tempVal > newDir*val)
                                nextLevel.addnewpivot(tempFirstPivot, components = this.zigzagPivots)
                                nextLevel.addnewpivot(tempSecondPivot, components = this.zigzagPivots)
                    nextLevel.addnewpivot(lPivot, components = this.zigzagPivots)
                    tempBullishPivot := na
                    tempBearishPivot := na
                    true
                else
                    tempPivot = newDir > 0? tempBullishPivot : tempBearishPivot
                    if(not na(tempPivot))
                        tempDir = tempPivot.dir
                        tempVal = tempPivot.point.price
                        val = lPivot.point.price
                        if(val*dir > tempVal*dir)
                            if(newDir > 0)
                                tempBullishPivot := lPivot
                            else
                                tempBearishPivot := lPivot
                        true
                    else
                        if(newDir > 0)
                            tempBullishPivot := lPivot
                        else
                            tempBearishPivot := lPivot
                        true
            else if(math.abs(dir) == 2)
                nextLevel.addnewpivot(lPivot, components = this.zigzagPivots)
                true
    if(nextLevel.zigzagPivots.size() >= this.zigzagPivots.size())
        nextLevel.zigzagPivots.clear()
    nextLevel

//*************************************************************************************************************************************************************//
//*************************************************************** TYPE ZigzagObject  **************************************************************************//
//*************************************************************************************************************************************************************//

method push(array<ZigzagObject> arr, val, maxItems)=>
    arr.push(val)
    if(arr.size() > maxItems)
        ZigzagObject lastObject = arr.shift()
        lastObject.zigzagLine.delete()
        lastObject.zigzagLabel.delete()

method popr(array<ZigzagObject> arr)=>
    ZigzagObject lastObject = arr.pop()
    lastObject.zigzagLine.delete()
    lastObject.zigzagLabel.delete()

//*************************************************************************************************************************************************************//
//*************************************************************** TYPE ZigzagDrawing  *************************************************************************//
//*************************************************************************************************************************************************************//

method init(ZigzagDrawing this)=>
    if(na(this.drawings))
        this.drawings := array.new<ZigzagObject>()
    if(na(this.zigzag))
        this.zigzag := Zigzag.new()
        this.zigzag.init()
    if(na(this.properties))
        this.properties := ZigzagProperties.new()
    this

method init(ZigzagDrawingPL this)=>
    if(na(this.zigzagLabels))
        this.zigzagLabels := array.new<label>()
    if(na(this.zigzag))
        this.zigzag := Zigzag.new()
        this.zigzag.init()
    if(na(this.properties))
        this.properties := ZigzagProperties.new()
    this

// @function Clear the drawings from ZigzagDrawing object
// @param this ZigzagDrawing object
// @returns ZigzagDrawing object
export method clear(ZigzagDrawing this)=>
    for zigzagObject in this.drawings
        zigzagObject.zigzagLine.delete()
        zigzagObject.zigzagLabel.delete()
    this.drawings.clear()
    this

// @function Clear the drawings from ZigzagDrawingPL object
// @param this ZigzagDrawingPL object
// @returns ZigzagDrawingPL object
export method clear(ZigzagDrawingPL this)=>
    this.zigzagLabels.flush()
    this.zigzagLine.delete()
    this

method draw_zg_line(ZigzagDrawing this, idx1) =>
    idx2 = idx1+1
    if this.zigzag.zigzagPivots.size() > idx2
        Pivot lastPivot = this.zigzag.zigzagPivots.get(idx1)
        Pivot llastPivot = this.zigzag.zigzagPivots.get(idx2)

        zline = line.new(lastPivot.point , llastPivot.point,
                 xloc=this.properties.xloc, color=this.properties.lineColor, width=this.properties.lineWidth, style=this.properties.lineStyle)
        label zlabel = na
        if(this.properties.showLabel)
            [hhllText, labelColor] = switch lastPivot.dir
                1 => ["LH", color.orange]
                2 => ["HH", color.green]
                -1 => ["HL", color.lime]
                -2 => ["LL", color.red]
                => ["NA", color.silver]


            labelStyle = lastPivot.dir > 0? label.style_label_down : label.style_label_up
            zlabel := label.new(lastPivot.point, yloc=yloc.price, xloc=this.properties.xloc,
                                     color=labelColor, style=labelStyle, text=hhllText,
                                     textcolor=this.properties.textColor, size = size.small)

        ZigzagObject zigzagObject = ZigzagObject.new(zline, zlabel)
        this.drawings.push(zigzagObject, this.properties.maxObjects)
    this

// @function Clears zigzag drawings array
// @param this array<ZigzagDrawing>
// @returns void
export method clear(array<ZigzagDrawing> this)=>
    for drawing in this
        drawing.clear()
    this.clear()

// @function Clears zigzag drawings array
// @param this array<ZigzagDrawingPL>
// @returns void
export method clear(array<ZigzagDrawingPL> this)=>
    for drawing in this
        drawing.clear()
    this.clear()

// @function draws fresh zigzag based on properties embedded in ZigzagDrawing object without trying to calculate
// @param this ZigzagDrawing object
// @returns ZigzagDrawing object
export method drawplain(ZigzagDrawing this)=>
    this.init()
    this.clear()
    if(barstate.islast or barstate.islastconfirmedhistory)
        for i=0 to this.zigzag.zigzagPivots.size()>1? this.zigzag.zigzagPivots.size()-2 : na
            lastPivot = this.zigzag.zigzagPivots.get(i)
            llastPivot = this.zigzag.zigzagPivots.get(i+1)

            level = lastPivot.level
            components = llastPivot.componentIndex - lastPivot.componentIndex
            zline = line.new(lastPivot.point, llastPivot.point, xloc=this.properties.xloc, color=this.properties.lineColor, width=this.properties.lineWidth, style=this.properties.lineStyle)
            dir = lastPivot.dir
            label zlabel = na
            if(this.properties.showLabel)
                labelStyle = dir > 0? label.style_label_down : label.style_label_up
                _indicators = lastPivot.indicatorValues
                _indicatorNames = lastPivot.indicatorNames
                indicatorRatios = lastPivot.indicatorRatios
                subPivotValues = array.new<float>()
                if(not na(lastPivot.subPivots))
                    for subPivot in lastPivot.subPivots
                        subPivotValues.push(subPivot.point.price)

                labelText = '(Level '+str.tostring(level)+' : '+str.tostring(lastPivot.ratio)+'/'+str.tostring(lastPivot.barRatio)+')' +
                                     (lastPivot.subComponents != 0? '\nSC :'+str.tostring(lastPivot.subComponents) + '/' : (level > 0 ? '\nMC : ' : '')) +
                                     (level > 0? (str.tostring(lastPivot.microComponents)): '') +
                                     (not na(lastPivot.subPivots) ? ' ('+subPivotValues.join(",")+') ' : '')

                for [index, indicatorName] in _indicatorNames
                    indicatorValue = _indicators.get(index)
                    labelText := labelText + '\n' + indicatorName + ' : ' + str.tostring(math.round(indicatorValue,2)) + ' / ' +str.tostring(indicatorRatios.get(index))

                lblColor=dir==2? color.green : dir == 1? color.orange : dir == -1? color.lime : color.red
                zlabel := label.new(lastPivot.point, yloc=yloc.price, color=lblColor, style=labelStyle, text=labelText,
                                         textcolor=this.properties.textColor, size = size.small, xloc=this.properties.xloc)

            this.drawings.push(ZigzagObject.new(zline, zlabel))
    this

// @function draws fresh zigzag based on properties embedded in ZigzagDrawingPL object without trying to calculate
// @param this ZigzagDrawingPL object
// @returns ZigzagDrawingPL object
export method drawplain(ZigzagDrawingPL this)=>
    this.init()
    this.clear()
    if(barstate.islast or barstate.islastconfirmedhistory)
        this.zigzagLine := polyline.new(this.zigzag.getPoints(), this.properties.curved, false, this.properties.xloc, this.properties.lineColor,
                                                                 line_style = this.properties.lineStyle, line_width = this.properties.lineWidth)
        for i=0 to this.zigzag.zigzagPivots.size()>1? this.zigzag.zigzagPivots.size()-2 : na
            lastPivot = this.zigzag.zigzagPivots.get(i)
            llastPivot = this.zigzag.zigzagPivots.get(i+1)

            level = lastPivot.level
            components = llastPivot.componentIndex - lastPivot.componentIndex
            dir = lastPivot.dir
            label zlabel = na
            if(this.properties.showLabel)
                labelStyle = dir > 0? label.style_label_down : label.style_label_up
                _indicators = lastPivot.indicatorValues
                _indicatorNames = lastPivot.indicatorNames
                indicatorRatios = lastPivot.indicatorRatios
                subPivotValues = array.new<float>()
                if(not na(lastPivot.subPivots))
                    for subPivot in lastPivot.subPivots
                        subPivotValues.push(subPivot.point.price)

                labelText = '(Level '+str.tostring(level)+' : '+str.tostring(lastPivot.ratio)+'/'+str.tostring(lastPivot.barRatio)+')' +
                                     (lastPivot.subComponents != 0? '\nSC :'+str.tostring(lastPivot.subComponents) + '/' : (level > 0 ? '\nMC : ' : '')) +
                                     (level > 0? (str.tostring(lastPivot.microComponents)): '') +
                                     (not na(lastPivot.subPivots) ? ' ('+subPivotValues.join(",")+') ' : '')

                for [index, indicatorName] in _indicatorNames
                    indicatorValue = _indicators.get(index)
                    labelText := labelText + '\n' + indicatorName + ' : ' + str.tostring(math.round(indicatorValue,2)) + ' / ' +str.tostring(indicatorRatios.get(index))

                lblColor=dir==2? color.green : dir == 1? color.orange : dir == -1? color.lime : color.red
                zlabel := label.new(lastPivot.point, yloc=yloc.price, color=lblColor, style=labelStyle, text=labelText,
                                         textcolor=this.properties.textColor, size = size.small, xloc=this.properties.xloc)

            this.zigzagLabels.push(zlabel)
    this

// @function draws fresh zigzag based on properties embedded in ZigzagDrawing object
// @param this ZigzagDrawing object
// @param ohlc values on which the zigzag needs to be calculated and drawn. If not set will use regular OHLC
// @param indicators Array of indicator values
// @param indicatorNames Array of indicator names for which values are present. Size of indicators array should be equal to that of indicatorNames
// @returns ZigzagDrawing object
export method drawfresh(ZigzagDrawing this, array<float> ohlc = na, matrix<float> indicators = na, array<string> indicatorNames = na)=>
    this.init()
    this.clear()
    this.zigzag.calculate(na(ohlc)?array.from(high,low):ohlc, na(indicators)? matrix.new<float>(): indicators, na(indicatorNames)? array.new<string>():indicatorNames)
    this.drawplain()

// @function draws zigzag based on the zigzagmatrix input
// @param this ZigzagDrawing object
// @param ohlc values on which the zigzag needs to be calculated and drawn. If not set will use regular OHLC
// @param indicators Array of indicator values
// @param indicatorNames Array of indicator names for which values are present. Size of indicators array should be equal to that of indicatorNames
// @returns [array<line> zigzaglines, array<label> zigzaglabels]
export method drawcontinuous(ZigzagDrawing this, array<float> ohlc = na, matrix<float> indicators = na, array<string> indicatorNames = na)=>
    this.init()
    this.zigzag.calculate(na(ohlc)?array.from(high,low):ohlc, na(indicators)? matrix.new<float>(): indicators, na(indicatorNames)? array.new<string>():indicatorNames)
    if this.drawings.size() > 0 and this.zigzag.flags.updateLastPivot
        this.drawings.popr()

    if(this.zigzag.flags.newPivot)
        if this.zigzag.flags.doublePivot and this.zigzag.zigzagPivots.size() >=3
            this.draw_zg_line(1)

        if this.zigzag.zigzagPivots.size() >= 2
            this.draw_zg_line(0)
    this
